{"version":3,"sources":["components/MapComponent.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_6__","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7___default","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_11___default","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_12__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_12___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_13___default","recompose__WEBPACK_IMPORTED_MODULE_14__","react_google_maps__WEBPACK_IMPORTED_MODULE_15__","MyMapComponent","compose","withProps","googleMapURL","concat","process","loadingElement","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","lifecycle","componentDidMount","_this","this","google","maps","DirectionsService","route","origin","props","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","directions","console","error","Fragment","defaultZoom","defaultCenter","className","classes","tableRoot","table","align","km","routes","legs","distance","text","milesRounded","Math","round","parseInt","toFixed","getDistance","duration","start_address","end_address","expandIcon","heading","steps","map","step","__html","instructions","direction","index","key","random","dangerouslySetInnerHTML","withStyles","theme","root","width","marginLeft","marginRight","marginTop","spacing","unit","overflowX","expansionPanel","marginBottom","progress","margin","minWidth","React","memo","container","item","xs","isMarkerShown"],"mappings":"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","file":"static/js/23.dc9d1e7f.chunk.js","sourcesContent":["/* global google */\n\nimport React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { compose, withProps, lifecycle } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, DirectionsRenderer } from \"react-google-maps\";\n\nconst styles = theme => ({\n    root: {\n      width: '98%',\n      marginLeft: '5px',\n      marginRight: '5px',\n      marginTop: theme.spacing.unit * 3,\n      overflowX: 'auto',\n      height: '700px'\n    },\n    expansionPanel: {\n      marginTop: '5px',\n      marginBottom: '15px',\n    },\n    progress: {\n      margin: theme.spacing.unit * 2,\n    },\n    tableRoot: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 2,\n      overflowX: 'auto',\n    },\n    table: {\n      minWidth: 500,\n    },\n  });\n\nconst getDirections = (directions) => {\n    if (directions) {\n        return directions.routes[0].legs[0].steps.map((step) => {\n            return { __html: `For ${step.distance.text} (approx ${step.duration.text}), ${step.instructions}<br />`};\n        });\n    } else {\n        return [];\n    }\n};\n\nconst getDistance = (directions) => {\n    if (directions) {\n        const km = directions.routes[0].legs[0].distance.text;\n        const milesRounded = (Math.round((parseInt(km) * 0.6213712) * 10) / 10).toFixed(1);\n        return `${milesRounded} miles (${km})`;\n    } else {\n        return '';\n    }\n}\n\nconst MyMapComponent = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_MAPS_KEY}`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `500px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap,\n  lifecycle({\n    componentDidMount() {\n      const DirectionsService = new google.maps.DirectionsService();\n\n      DirectionsService.route({\n        origin: this.props.origin,\n        destination: this.props.destination,\n        travelMode: google.maps.TravelMode.DRIVING,\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result,\n          });\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      });\n    }\n  })\n)((props) =>\n  <>\n      <GoogleMap\n          defaultZoom={8}\n          defaultCenter={props.origin}\n      >\n          <Paper className={props.classes.tableRoot}>\n            <Table className={props.classes.table}>\n              <TableBody>\n                <TableRow>\n                  <TableCell align=\"right\"><b>Distance</b></TableCell>\n                  <TableCell align=\"left\">{getDistance(props.directions)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell align=\"right\"><b>Duration</b></TableCell>\n                  <TableCell align=\"left\">{props.directions ? props.directions.routes[0].legs[0].duration.text : ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell align=\"right\"><b>Start Address</b></TableCell>\n                  <TableCell align=\"left\">{props.directions ? props.directions.routes[0].legs[0].start_address : ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell align=\"right\"><b>End Address</b></TableCell>\n                  <TableCell align=\"left\">{props.directions ? props.directions.routes[0].legs[0].end_address : ''}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Paper>\n          <br />\n          <br />\n          {props.directions && <DirectionsRenderer directions={props.directions} />}\n      </GoogleMap>\n      <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography className={props.classes.heading}>\n                  <b>Step by step directions</b>\n              </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n              <Paper className={props.classes.tableRoot}>\n                <Table className={props.classes.table}>\n                  <TableBody>\n                    { getDirections(props.directions).map((direction, index) => {\n                                return <TableRow key={Math.random()}>\n                                        <TableCell align=\"right\"><b>Step {index + 1}</b></TableCell>\n                                        <TableCell align=\"right\"><div key={Math.random()} dangerouslySetInnerHTML={direction} /></TableCell>\n                                      </TableRow>\n                    })}\n                  </TableBody>\n                </Table>\n              </Paper>\n              <br />\n              <br />\n              <br />\n              <br />\n          </ExpansionPanelDetails>\n      </ExpansionPanel>\n  </>\n);\n\nfunction MapComponent(props) {\n  const { origin, destination, classes } = props;\n\n  if (!origin) {\n    return <CircularProgress />;\n  }\n\n  return (<ExpansionPanel key='nav-map' className={classes.expansionPanel}>\n    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n      <Typography className={classes.heading}>\n        <b>Race Directions</b>\n      </Typography>\n    </ExpansionPanelSummary>\n    <ExpansionPanelDetails>\n      <Grid className={classes.root} container>\n        <Grid item xs={12} key='map-container'>\n          <MyMapComponent classes={classes}\n                          isMarkerShown={true}\n                          origin={origin}\n                          destination={destination}\n                          />\n          </Grid>\n      </Grid>\n    </ExpansionPanelDetails>\n  </ExpansionPanel>);\n}\n\nexport default withStyles(styles)(React.memo(MapComponent));\n"],"sourceRoot":""}