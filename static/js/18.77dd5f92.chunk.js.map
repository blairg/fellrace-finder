{"version":3,"sources":["components/OverallStats.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_7___default","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_12__","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_12___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_13___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_14__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_14___default","PerformanceStats","React","lazy","e","then","bind","AveragePerformanceChart","Promise","all","OverallPerformanceChart","HeaderTableCell","withStyles","theme","root","backgroundColor","color","palette","common","white","TableCell","styles","width","marginLeft","marginRight","marginTop","spacing","unit","overflowX","table","minWidth","expansionPanel","marginBottom","progress","margin","buildMonthRows","racesByYear","listOfYears","map","eachYear","listOfMonths","push","staticListOfMonths","listOfTableCells","i","a","createElement","key","numeric","staticListOfTableCells","yearKey","year","toString","yearCell","totalForYear","months","length","eachMonth","monthName","Object","keys","monthIndex","indexOf","yearMonthKey","monthValue","concat","parseInt","totalCell","rowKey","unshift","memo","props","overallStats","classes","yearsAndMonths","Fragment","className","expandIcon","heading","container","item","xs","fallback","overallRaceData","performanceData","performanceByMonthData","title","xTitle","performanceByYearData"],"mappings":"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","file":"static/js/18.77dd5f92.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst PerformanceStats = React.lazy(() => import('./PerformanceStats'));\nconst AveragePerformanceChart = React.lazy(() => import('./AveragePerformanceChart'));\nconst OverallPerformanceChart = React.lazy(() => import('./OverallPerformanceChart'));\n\nconst HeaderTableCell = withStyles(theme => ({\n  root: {\n    backgroundColor: '#7A27A0',\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nconst styles = theme => ({\n  root: {\n    width: '98%',\n    marginLeft: '5px',\n    marginRight: '5px',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n  expansionPanel: {\n    marginTop: '5px',\n    marginBottom: '15px',\n  },\n  progress: {\n    margin: theme.spacing.unit * 2,\n  },\n});\n\nconst staticListOfMonths = () => {\n  let listOfMonths = [];\n\n  listOfMonths.push('January');\n  listOfMonths.push('February');\n  listOfMonths.push('March');\n  listOfMonths.push('April');\n  listOfMonths.push('May');\n  listOfMonths.push('June');\n  listOfMonths.push('July');\n  listOfMonths.push('August');\n  listOfMonths.push('September');\n  listOfMonths.push('October');\n  listOfMonths.push('November');\n  listOfMonths.push('December');\n\n  return listOfMonths;\n};\n\nconst staticListOfTableCells = () => {\n  let listOfMonths = [];\n\n  for (let i = 0; i < 12; i++) {\n    listOfMonths.push(\n      <TableCell key={i} numeric>\n        0\n      </TableCell>,\n    );\n  }\n\n  return listOfMonths;\n};\n\nconst buildMonthRows = racesByYear => {\n  let listOfYears = [];\n  let index = 0;\n\n  racesByYear.map(eachYear => {\n    const listOfMonths = staticListOfMonths();\n    const listOfTableCells = staticListOfTableCells();\n    const yearKey = 'year-' + eachYear.year.toString() + '-' + index.toString();\n    const yearCell = (\n      <TableCell key={yearKey} numeric>\n        {eachYear.year}\n      </TableCell>\n    );\n    let totalForYear = 0;\n\n    if (eachYear.months && eachYear.months.length > 0) {\n      for (let i = 0; i < eachYear.months.length; i++) {\n        const eachMonth = eachYear.months[i];\n        const monthName = Object.keys(eachMonth)[0];\n        const monthIndex = listOfMonths.indexOf(monthName);\n\n        if (monthIndex > -1) {\n          const yearMonthKey =\n            'year-' + eachYear.year.toString() + '-month' + monthName;\n          const monthValue = `${eachMonth[monthName]}`;\n\n          totalForYear = totalForYear + parseInt(monthValue, 10);\n          listOfTableCells[monthIndex] = (\n            <TableCell key={yearMonthKey} numeric>\n              {monthValue}\n            </TableCell>\n          );\n        }\n      }\n    }\n\n    const totalCell = (\n      <TableCell key={`total-${yearKey}`} numeric>\n        {totalForYear}\n      </TableCell>\n    );\n    const rowKey = eachYear.year.toString() + '-' + index.toString();\n\n    listOfTableCells.unshift(totalCell);\n    listOfTableCells.unshift(yearCell);\n    listOfYears.push(<TableRow key={rowKey}>{listOfTableCells}</TableRow>);\n  });\n\n  return listOfYears;\n};\n\nfunction OverallStats(props) {\n  const { overallStats, classes } = props;\n  const yearsAndMonths = buildMonthRows(overallStats.racesByYear);\n\n  return (\n    <React.Fragment>\n      <ExpansionPanel className={classes.expansionPanel}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography className={classes.heading}>\n            Show number of races by year and month\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container>\n            <Grid item xs={12}>\n              <Suspense fallback={<CircularProgress className={styles.progress} />}>\n                <PerformanceStats overallStats={overallStats} />\n              </Suspense>\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.root}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow key={'header'}>\n                      <HeaderTableCell key={'year'} />\n                      <HeaderTableCell key={'total'} numeric>\n                        Total\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'jan'} numeric>\n                        Jan\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'feb'} numeric>\n                        Feb\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'mar'} numeric>\n                        Mar\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'apr'} numeric>\n                        Apr\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'may'} numeric>\n                        May\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'jun'} numeric>\n                        Jun\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'jul'} numeric>\n                        Jul\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'aug'} numeric>\n                        Aug\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'sep'} numeric>\n                        Sep\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'oct'} numeric>\n                        Oct\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'nov'} numeric>\n                        Nov\n                      </HeaderTableCell>\n                      <HeaderTableCell key={'dec'} numeric>\n                        Dec\n                      </HeaderTableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>{yearsAndMonths}</TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      <ExpansionPanel className={classes.expansionPanel}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography className={classes.heading}>\n            Show performance graphs\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container>\n            <Grid item xs={12}>\n              <Suspense fallback={<CircularProgress className={styles.progress} />}>\n                <OverallPerformanceChart\n                    overallRaceData={overallStats.overallRaceData}\n                  />\n              </Suspense>\n            </Grid>\n            <Grid item xs={12}>\n              <Suspense fallback={<CircularProgress className={styles.progress} />}>\n                <AveragePerformanceChart\n                  performanceData={overallStats.performanceByMonthData}\n                  title={'Average Performance By Month'}\n                  xTitle={'Year/Month'}\n                />\n              </Suspense>\n            </Grid>\n            <Grid item xs={12}>\n            <Suspense fallback={<CircularProgress className={styles.progress} />}>\n                <AveragePerformanceChart\n                    performanceData={overallStats.performanceByYearData}\n                    title={'Average Performance By Year'}\n                    xTitle={'Year'}\n                  />\n              </Suspense>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(React.memo(OverallStats));\n"],"sourceRoot":""}