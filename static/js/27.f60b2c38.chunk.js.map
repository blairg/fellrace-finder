{"version":3,"sources":["components/RaceCalendar.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","react_big_calendar__WEBPACK_IMPORTED_MODULE_2__","moment__WEBPACK_IMPORTED_MODULE_3__","moment__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_6___default","localizer","BigCalendar","momentLocalizer","moment","styles","theme","bigRaceCalendar","minHeight","short","backgroundColor","color","marginRight","medium","long","cancelled","borderStyle","border","borderColor","postponed","allViews","Object","keys","Views","map","k","propGetter","event","start","end","isSelected","newStyle","borderRadius","outline","opacity","className","style","onSelectEvent","window","open","url","withStyles","React","memo","props","classes","events","a","createElement","container","justify","alignItems","alt","popup","views","timeslots","showMultiDayTimes","defaultView","MONTH","startAccessor","endAccessor","defaultDate","Date","scrollToTime","eventPropGetter","selectable"],"mappings":"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","file":"static/js/27.f60b2c38.chunk.js","sourcesContent":["/* global window */\n\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nconst styles = theme => ({\n  bigRaceCalendar: {\n    minHeight: \"450px\"\n  },\n  short: {\n    backgroundColor: \"#946F00\",\n    color: \"white\",\n    marginRight: \"2px\"\n  },\n  medium: {\n    backgroundColor: \"#FFD799\",\n    color: \"black\",\n    marginRight: \"2px\"\n  },\n  long: {\n    backgroundColor: \"#70A5FE\",\n    color: \"white\",\n    marginRight: \"2px\"\n  },\n  cancelled: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    marginRight: \"2px\",\n    borderStyle: \"solid\",\n    border: \"3px\",\n    borderColor: \"#3d2d01\"\n  },\n  postponed: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    borderStyle: \"solid\",\n    border: \"3px\",\n    borderColor: \"blue\"\n  }\n});\n\nconst allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k]);\n\nconst propGetter = (event, start, end, isSelected) => {\n  let newStyle = {\n    backgroundColor: \"#918f8f\",\n    color: \"black\",\n    borderRadius: \"0px\",\n    border: \"none\"\n  };\n\n  if (event.short) {\n    newStyle.outline = \"2px solid #946F00\";\n    newStyle.backgroundColor = styles().short.backgroundColor;\n    newStyle.color = styles().short.color;\n  }\n\n  if (event.medium) {\n    newStyle.outline = \"2px solid #FFD799\";\n    newStyle.backgroundColor = styles().medium.backgroundColor;\n    newStyle.color = styles().medium.color;\n  }\n\n  if (event.long) {\n    newStyle.outline = \"2px solid #70A5FE\";\n    newStyle.backgroundColor = styles().long.backgroundColor;\n    newStyle.color = styles().long.color;\n  }\n\n  if (event.cancelled) {\n    newStyle.outline = \"2px solid #3d2d01\";\n    newStyle.opacity = \"0.9\";\n  }\n\n  if (event.postponed) {\n    newStyle.outline = \"2px solid black\";\n    newStyle.opacity = \"0.9\";\n  }\n\n  return {\n    className: \"\",\n    style: newStyle\n  };\n};\n\nconst onSelectEvent = event => {\n  window.open(event.url, \"_blank\");\n};\n\nfunction RaceCalendar(props) {\n  const { classes, events } = props;\n\n  if (!events) {\n    return (\n      <div>\n        <CircularProgress className={classes.bigRaceCalendar} />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Avatar className={classes.short} alt=\"Short Races\">\n          S\n        </Avatar>\n        <Avatar className={classes.medium} alt=\"Medium Races\">\n          M\n        </Avatar>\n        <Avatar className={classes.long} alt=\"Long Races\">\n          L\n        </Avatar>\n        <Avatar className={classes.cancelled} alt=\"Cancelled Races\">\n          C\n        </Avatar>\n        <Avatar className={classes.postponed} alt=\"Postponed Races\">\n          P\n        </Avatar>\n      </Grid>\n      <br />\n      <br />\n      <BigCalendar\n        popup\n        className={classes.bigRaceCalendar}\n        events={events}\n        views={allViews}\n        timeslots={4}\n        showMultiDayTimes\n        defaultView={BigCalendar.Views.MONTH}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        defaultDate={new Date()}\n        scrollToTime={new Date(1970, 1, 1, 6)}\n        localizer={localizer}\n        eventPropGetter={propGetter}\n        selectable={true}\n        onSelectEvent={onSelectEvent}\n      />\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(React.memo(RaceCalendar));\n"],"sourceRoot":""}