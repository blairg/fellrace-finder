{"version":3,"sources":["components/PerformanceStats.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_3___default","buildNoOfWins","wins","a","createElement","buildWinPercentage","winPercentage","buildBestRace","noOfWins","bestRace","bestRaceId","raceLink","concat","href","target","rel","buildHighestPlace","highestPlace","buildHighestPercentage","highestPercentage","buildDistance","kilometersRaced","milesRaced","parseFloat","toLocaleString","buildClimbed","metersClimbed","feetClimbed","parseInt","buildShortestRace","shortestRace","name","kilometers","miles","buildLongestRace","longestRace","buildAverageRace","averageRace","withStyles","theme","root","width","marginLeft","marginRight","marginTop","spacing","unit","overflowX","React","memo","props","overallStats","Fragment","noOfRaces","raceWinPercentage","overallPosition","percentagePosition"],"mappings":"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","file":"static/js/28.b8f3a1af.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    width: '98%',\n    marginLeft: '5px',\n    marginRight: '5px',\n    marginTop: theme.spacing.unit * 4,\n    overflowX: 'auto',\n  },\n});\n\nconst buildNoOfWins = wins => {\n  if (wins > 0) {\n    return (\n      <Typography>\n        <b>Wins: </b>\n        {wins}\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildWinPercentage = winPercentage => {\n  if (winPercentage !== '0%') {\n    return (\n      <Typography>\n        <b>Win Percentage: </b> {winPercentage}\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildBestRace = (noOfWins, bestRace, bestRaceId) => {\n  const raceLink = `http://www.fellrunner.org.uk/results.php?id=${bestRaceId}`;\n\n  if (noOfWins <= 1) {\n    return (\n      <Typography>\n        <b>Best Race: </b>{' '}\n        <a href={raceLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          {bestRace}\n        </a>\n      </Typography>\n    );\n  }\n\n  return null;\n};\n\nconst buildHighestPlace = highestPlace => {\n  if (highestPlace > 1) {\n    return (\n      <Typography>\n        <b>Highest Place: </b> {highestPlace}\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildHighestPercentage = highestPercentage => {\n  if (highestPercentage > 0) {\n    return (\n      <Typography>\n        <b>Highest Percentage: </b> {highestPercentage}\n        {'%'}\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildDistance = (kilometersRaced, milesRaced) => {\n  if (kilometersRaced > 0) {\n    return (\n      <Typography>\n        <b>Distance: </b> {parseFloat(kilometersRaced).toLocaleString()}\n        km - {parseFloat(milesRaced).toLocaleString()}\n        miles\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildClimbed = (metersClimbed, feetClimbed) => {\n  if (metersClimbed > 0) {\n    return (\n      <Typography>\n        <b>Climbed: </b> {parseInt(metersClimbed, 10).toLocaleString()}m -{' '}\n        {parseInt(feetClimbed, 10).toLocaleString()}\n        feet\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildShortestRace = shortestRace => {\n  if (shortestRace && shortestRace.name) {\n    return (\n      <Typography>\n        <b>Shortest Race: </b> {shortestRace.name} - {shortestRace.kilometers}\n        km - {shortestRace.miles}\n        miles\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildLongestRace = longestRace => {\n  if (longestRace && longestRace.name) {\n    return (\n      <Typography>\n        <b>Longest Race: </b> {longestRace.name} - {longestRace.kilometers}\n        km - {longestRace.miles}\n        miles\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst buildAverageRace = averageRace => {\n  if (averageRace && averageRace.kilometers) {\n    return (\n      <Typography>\n        <b>Average Race Distance: </b> {averageRace.kilometers}\n        km - {averageRace.miles}\n        miles\n      </Typography>\n    );\n  } else {\n    return null;\n  }\n};\n\nfunction PerformanceStats(props) {\n  const { overallStats } = props;\n\n  return (\n    <React.Fragment>\n      <Paper>\n        <Typography>\n          <b>Races: </b> {overallStats.noOfRaces}\n        </Typography>\n        {buildNoOfWins(overallStats.noOfWins)}\n        {buildWinPercentage(overallStats.raceWinPercentage)}\n        <Typography>\n          <b>Average Position: </b> {overallStats.overallPosition}\n        </Typography>\n        <Typography>\n          <b>Average Percentage: </b> {overallStats.percentagePosition}\n          {'%'}\n        </Typography>\n        {buildBestRace(\n          overallStats.noOfWins,\n          overallStats.bestRace,\n          overallStats.bestRaceId,\n        )}\n        {buildHighestPlace(overallStats.highestPlace)}\n        {buildHighestPercentage(overallStats.highestPercentage)}\n        {buildDistance(overallStats.kilometersRaced, overallStats.milesRaced)}\n        {buildClimbed(overallStats.metersClimbed, overallStats.feetClimbed)}\n        {buildShortestRace(overallStats.shortestRace)}\n        {buildLongestRace(overallStats.longestRace)}\n        {buildAverageRace(overallStats.averageRace)}\n      </Paper>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(React.memo(PerformanceStats));\n"],"sourceRoot":""}