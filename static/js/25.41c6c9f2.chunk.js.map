{"version":3,"sources":["components/MapComponent.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_ExpansionPanel__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_ExpansionPanelSummary__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_ExpansionPanelDetails__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_6__","_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_6___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7___default","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_8___default","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9___default","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_10___default","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_11___default","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_12__","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_12___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_13___default","recompose__WEBPACK_IMPORTED_MODULE_14__","react_google_maps__WEBPACK_IMPORTED_MODULE_15__","MyMapComponent","compose","withProps","googleMapURL","concat","process","loadingElement","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","lifecycle","componentDidMount","_this","this","google","maps","DirectionsService","route","origin","props","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","directions","Fragment","defaultZoom","defaultCenter","className","classes","tableRoot","table","align","km","routes","legs","distance","text","milesRounded","Math","round","parseInt","toFixed","getDistance","duration","start_address","end_address","expandIcon","heading","steps","map","step","__html","instructions","direction","index","key","random","dangerouslySetInnerHTML","withStyles","theme","root","width","marginLeft","marginRight","marginTop","spacing","unit","overflowX","expansionPanel","marginBottom","progress","margin","minWidth","React","memo","container","item","xs","isMarkerShown"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAAK,EAAAE,GAAAE,EAAAT,EAAA,KAAAU,EAAAV,EAAAK,EAAAI,GAAAE,EAAAX,EAAA,KAAAY,EAAAZ,EAAAK,EAAAM,GAAAE,EAAAb,EAAA,KAAAc,EAAAd,EAAAK,EAAAQ,GAAAE,EAAAf,EAAA,KAAAgB,EAAAhB,EAAAK,EAAAU,GAAAE,EAAAjB,EAAA,KAAAkB,EAAAlB,EAAAK,EAAAY,GAAAE,EAAAnB,EAAA,KAAAoB,EAAApB,EAAAK,EAAAc,GAAAE,EAAArB,EAAA,KAAAsB,EAAAtB,EAAAK,EAAAgB,GAAAE,EAAAvB,EAAA,KAAAwB,EAAAxB,EAAAK,EAAAkB,GAAAE,EAAAzB,EAAA,KAAA0B,EAAA1B,EAAAK,EAAAoB,GAAAE,EAAA3B,EAAA,KAAA4B,EAAA5B,EAAAK,EAAAsB,GAAAE,EAAA7B,EAAA,IAAA8B,EAAA9B,EAAAK,EAAAwB,GAAAE,EAAA/B,EAAA,KAAAgC,EAAAhC,EAAA,KA4EMiC,EAAiBC,YACrBC,YAAU,CACRC,aAAY,+CAAAC,OACVC,2CAEFC,eAAgBnC,EAAAoC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,UACpCC,iBAAkBxC,EAAAoC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,WACtCE,WAAYzC,EAAAoC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,YAElCG,eACAC,gBACAC,YAAU,CACRC,kBADQ,WACY,IAAAC,EAAAC,MACQ,IAAIC,OAAOC,KAAKC,mBAExBC,MAChB,CACEC,OAAQL,KAAKM,MAAMD,OACnBE,YAAaP,KAAKM,MAAMC,YACxBC,WAAYP,OAAOC,KAAKO,WAAWC,SAErC,SAACC,EAAQC,GACHA,IAAWX,OAAOC,KAAKW,iBAAiBC,GAC1Cf,EAAKgB,SAAS,CACZC,WAAYL,IAIdZ,EAAKgB,SAAS,CACZC,WAAY,YA7BHjC,CAoCrB,SAAAuB,GACA,OAAKA,EAAMU,WAKT/D,EAAAoC,EAAAC,cAAArC,EAAAoC,EAAA4B,SAAA,KACEhE,EAAAoC,EAAAC,cAACT,EAAA,UAAD,CAAWqC,YAAa,EAAGC,cAAeb,EAAMD,QAC9CpD,EAAAoC,EAAAC,cAACb,EAAAY,EAAD,CAAO+B,UAAWd,EAAMe,QAAQC,WAC9BrE,EAAAoC,EAAAC,cAACrB,EAAAoB,EAAD,CAAO+B,UAAWd,EAAMe,QAAQE,OAC9BtE,EAAAoC,EAAAC,cAACnB,EAAAkB,EAAD,KACEpC,EAAAoC,EAAAC,cAACf,EAAAc,EAAD,KACEpC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,sBAEFrC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,QA/Db,SAAAR,GAClB,GAAIA,EAAY,CACd,IAAMS,EAAKT,EAAWU,OAAO,GAAGC,KAAK,GAAGC,SAASC,KAC3CC,GACJC,KAAKC,MAAqB,SAAfC,SAASR,GAAkB,IAAM,IAC5CS,QAAQ,GACV,SAAAhD,OAAU4C,EAAV,YAAA5C,OAAiCuC,EAAjC,KAEA,MAAO,GAwDQU,CAAY7B,EAAMU,cAGvB/D,EAAAoC,EAAAC,cAACf,EAAAc,EAAD,KACEpC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,sBAEFrC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,QACdlB,EAAMU,WACHV,EAAMU,WAAWU,OAAO,GAAGC,KAAK,GAAGS,SAASP,KAC5C,KAGR5E,EAAAoC,EAAAC,cAACf,EAAAc,EAAD,KACEpC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,2BAEFrC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,QACdlB,EAAMU,WACHV,EAAMU,WAAWU,OAAO,GAAGC,KAAK,GAAGU,cACnC,KAGRpF,EAAAoC,EAAAC,cAACf,EAAAc,EAAD,KACEpC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,yBAEFrC,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,QACdlB,EAAMU,WACHV,EAAMU,WAAWU,OAAO,GAAGC,KAAK,GAAGW,YACnC,QAMdrF,EAAAoC,EAAAC,cAAA,WACArC,EAAAoC,EAAAC,cAAA,WACCgB,EAAMU,YACL/D,EAAAoC,EAAAC,cAACT,EAAA,mBAAD,CAAoBmC,WAAYV,EAAMU,cAG1C/D,EAAAoC,EAAAC,cAACjC,EAAAgC,EAAD,KACEpC,EAAAoC,EAAAC,cAAC/B,EAAA8B,EAAD,CAAuBkD,WAAYtF,EAAAoC,EAAAC,cAACzB,EAAAwB,EAAD,OACjCpC,EAAAoC,EAAAC,cAAC3B,EAAA0B,EAAD,CAAY+B,UAAWd,EAAMe,QAAQmB,SACnCvF,EAAAoC,EAAAC,cAAA,sCAGJrC,EAAAoC,EAAAC,cAAC7B,EAAA4B,EAAD,KACEpC,EAAAoC,EAAAC,cAACb,EAAAY,EAAD,CAAO+B,UAAWd,EAAMe,QAAQC,WAC9BrE,EAAAoC,EAAAC,cAACrB,EAAAoB,EAAD,CAAO+B,UAAWd,EAAMe,QAAQE,OAC9BtE,EAAAoC,EAAAC,cAACnB,EAAAkB,EAAD,MAjIQ2B,EAkISV,EAAMU,WAjI/BA,EACKA,EAAWU,OAAO,GAAGC,KAAK,GAAGc,MAAMC,IAAI,SAAAC,GAC5C,MAAO,CACLC,OAAM,OAAA1D,OAASyD,EAAKf,SAASC,KAAvB,aAAA3C,OAAuCyD,EAAKP,SAASP,KAArD,OAAA3C,OACJyD,EAAKE,aADD,aAMH,IAwHsCH,IAAI,SAACI,EAAWC,GAC/C,OACE9F,EAAAoC,EAAAC,cAACf,EAAAc,EAAD,CAAU2D,IAAKjB,KAAKkB,UAClBhG,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,iBAASyD,EAAQ,IAEnB9F,EAAAoC,EAAAC,cAACjB,EAAAgB,EAAD,CAAWmC,MAAM,SACfvE,EAAAoC,EAAAC,cAAA,OACE0D,IAAKjB,KAAKkB,SACVC,wBAAyBJ,WASzC7F,EAAAoC,EAAAC,cAAA,WACArC,EAAAoC,EAAAC,cAAA,WACArC,EAAAoC,EAAAC,cAAA,WACArC,EAAAoC,EAAAC,cAAA,cAvFC,KAhEW,IAAA0B,IAgMPmC,+BA1NA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,MAAO,MACPC,WAAY,MACZC,YAAa,MACbC,UAAgC,EAArBL,EAAMM,QAAQC,KACzBC,UAAW,OACXpE,OAAQ,SAEVqE,eAAgB,CACdJ,UAAW,MACXK,aAAc,QAEhBC,SAAU,CACRC,OAA6B,EAArBZ,EAAMM,QAAQC,MAExBrC,UAAW,CACTgC,MAAO,OACPG,UAAgC,EAArBL,EAAMM,QAAQC,KACzBC,UAAW,QAEbrC,MAAO,CACL0C,SAAU,OAoMCd,CAAmBe,IAAMC,KAlCxC,SAAsB7D,GAAO,IACnBD,EAAiCC,EAAjCD,OAAQE,EAAyBD,EAAzBC,YAAac,EAAYf,EAAZe,QAE7B,OAAKhB,GAIAA,GAAUE,EACNtD,EAAAoC,EAAAC,cAACX,EAAAU,EAAD,MAIPpC,EAAAoC,EAAAC,cAACjC,EAAAgC,EAAD,CAAgB2D,IAAI,UAAU5B,UAAWC,EAAQwC,gBAC/C5G,EAAAoC,EAAAC,cAAC/B,EAAA8B,EAAD,CAAuBkD,WAAYtF,EAAAoC,EAAAC,cAACzB,EAAAwB,EAAD,OACjCpC,EAAAoC,EAAAC,cAAC3B,EAAA0B,EAAD,CAAY+B,UAAWC,EAAQmB,SAC7BvF,EAAAoC,EAAAC,cAAA,8BAGJrC,EAAAoC,EAAAC,cAAC7B,EAAA4B,EAAD,KACEpC,EAAAoC,EAAAC,cAACvB,EAAAsB,EAAD,CAAM+B,UAAWC,EAAQgC,KAAMe,WAAS,GACtCnH,EAAAoC,EAAAC,cAACvB,EAAAsB,EAAD,CAAMgF,MAAI,EAACC,GAAI,GAAItB,IAAI,iBACrB/F,EAAAoC,EAAAC,cAACR,EAAD,CACEuC,QAASA,EACTkD,eAAe,EACflE,OAAQA,EACRE,YAAaA,QArBhBtD,EAAAoC,EAAAC,cAAArC,EAAAoC,EAAA4B,SAAA","file":"static/js/25.41c6c9f2.chunk.js","sourcesContent":["/* global google */\n\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { compose, withProps, lifecycle } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer\n} from \"react-google-maps\";\n\nconst styles = theme => ({\n  root: {\n    width: \"98%\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    marginTop: theme.spacing.unit * 3,\n    overflowX: \"auto\",\n    height: \"700px\"\n  },\n  expansionPanel: {\n    marginTop: \"5px\",\n    marginBottom: \"15px\"\n  },\n  progress: {\n    margin: theme.spacing.unit * 2\n  },\n  tableRoot: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 2,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 500\n  }\n});\n\nconst getDirections = directions => {\n  if (directions) {\n    return directions.routes[0].legs[0].steps.map(step => {\n      return {\n        __html: `For ${step.distance.text} (approx ${step.duration.text}), ${\n          step.instructions\n        }<br />`\n      };\n    });\n  } else {\n    return [];\n  }\n};\n\nconst getDistance = directions => {\n  if (directions) {\n    const km = directions.routes[0].legs[0].distance.text;\n    const milesRounded = (\n      Math.round(parseInt(km) * 0.6213712 * 10) / 10\n    ).toFixed(1);\n    return `${milesRounded} miles (${km})`;\n  } else {\n    return \"\";\n  }\n};\n\nconst MyMapComponent = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${\n      process.env.REACT_APP_MAPS_KEY\n    }`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `500px` }} />,\n    mapElement: <div style={{ height: `100%` }} />\n  }),\n  withScriptjs,\n  withGoogleMap,\n  lifecycle({\n    componentDidMount() {\n      const DirectionsService = new google.maps.DirectionsService();\n\n      DirectionsService.route(\n        {\n          origin: this.props.origin,\n          destination: this.props.destination,\n          travelMode: google.maps.TravelMode.DRIVING\n        },\n        (result, status) => {\n          if (status === google.maps.DirectionsStatus.OK) {\n            this.setState({\n              directions: result\n            });\n          } else {\n            //console.log(`error fetching directions ${result}`);\n            this.setState({\n              directions: null\n            });\n          }\n        }\n      );\n    }\n  })\n)(props => {\n  if (!props.directions) {\n    return null;\n  }\n\n  return (\n    <>\n      <GoogleMap defaultZoom={8} defaultCenter={props.origin}>\n        <Paper className={props.classes.tableRoot}>\n          <Table className={props.classes.table}>\n            <TableBody>\n              <TableRow>\n                <TableCell align=\"right\">\n                  <b>Distance</b>\n                </TableCell>\n                <TableCell align=\"left\">\n                  {getDistance(props.directions)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"right\">\n                  <b>Duration</b>\n                </TableCell>\n                <TableCell align=\"left\">\n                  {props.directions\n                    ? props.directions.routes[0].legs[0].duration.text\n                    : \"\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"right\">\n                  <b>Start Address</b>\n                </TableCell>\n                <TableCell align=\"left\">\n                  {props.directions\n                    ? props.directions.routes[0].legs[0].start_address\n                    : \"\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"right\">\n                  <b>End Address</b>\n                </TableCell>\n                <TableCell align=\"left\">\n                  {props.directions\n                    ? props.directions.routes[0].legs[0].end_address\n                    : \"\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Paper>\n        <br />\n        <br />\n        {props.directions && (\n          <DirectionsRenderer directions={props.directions} />\n        )}\n      </GoogleMap>\n      <ExpansionPanel>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography className={props.classes.heading}>\n            <b>Step by step directions</b>\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Paper className={props.classes.tableRoot}>\n            <Table className={props.classes.table}>\n              <TableBody>\n                {getDirections(props.directions).map((direction, index) => {\n                  return (\n                    <TableRow key={Math.random()}>\n                      <TableCell align=\"right\">\n                        <b>Step {index + 1}</b>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <div\n                          key={Math.random()}\n                          dangerouslySetInnerHTML={direction}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Paper>\n          <br />\n          <br />\n          <br />\n          <br />\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </>\n  );\n});\n\nfunction MapComponent(props) {\n  const { origin, destination, classes } = props;\n\n  if (!origin) {\n    return <></>;\n  }\n\n  if (!origin && destination) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <ExpansionPanel key=\"nav-map\" className={classes.expansionPanel}>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography className={classes.heading}>\n          <b>Race Directions</b>\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <Grid className={classes.root} container>\n          <Grid item xs={12} key=\"map-container\">\n            <MyMapComponent\n              classes={classes}\n              isMarkerShown={true}\n              origin={origin}\n              destination={destination}\n            />\n          </Grid>\n        </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n\nexport default withStyles(styles)(React.memo(MapComponent));\n"],"sourceRoot":""}