{"version":3,"sources":["components/RaceCalendar.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","react_big_calendar__WEBPACK_IMPORTED_MODULE_2__","moment__WEBPACK_IMPORTED_MODULE_3__","moment__WEBPACK_IMPORTED_MODULE_3___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_4___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_Avatar__WEBPACK_IMPORTED_MODULE_6___default","localizer","BigCalendar","momentLocalizer","moment","styles","theme","bigRaceCalendar","minHeight","short","backgroundColor","color","marginRight","medium","long","allViews","Object","keys","Views","map","k","propGetter","event","start","end","isSelected","newStyle","borderRadius","border","className","style","withStyles","React","memo","props","classes","events","a","createElement","container","justify","alignItems","alt","popup","views","timeslots","showMultiDayTimes","defaultView","MONTH","startAccessor","endAccessor","defaultDate","Date","scrollToTime","eventPropGetter"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,MAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAAK,EAAAG,GAAAE,EAAAV,EAAA,IAAAW,EAAAX,EAAAK,EAAAK,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAAK,EAAAO,GAAAE,EAAAd,EAAA,MAAAe,EAAAf,EAAAK,EAAAS,GAcME,GAdNhB,EAAA,MAckBiB,IAAYC,gBAAgBC,MAExCC,EAAS,SAAAC,GAAK,MAAK,CACvBC,gBAAiB,CACfC,UAAW,SAEbC,MAAO,CACLC,gBAAiB,aACjBC,MAAO,QACPC,YAAa,OAEfC,OAAQ,CACNH,gBAAiB,SACjBC,MAAO,QACPC,YAAa,OAEfE,KAAM,CACJJ,gBAAiB,MACjBC,MAAO,WAILI,EAAWC,OAAOC,KAAKf,IAAYgB,OAAOC,IAAI,SAAAC,GAAC,OAAIlB,IAAYgB,MAAME,KAErEC,EAAa,SAACC,EAAOC,EAAOC,EAAKC,GA0BrC,IAAIC,EAAW,CACbhB,gBAAiB,YACjBC,MAAO,QACPgB,aAAc,MACdC,OAAQ,QAkBV,OAfIN,EAAMb,QACRiB,EAAShB,gBAnDQ,aAoDjBgB,EAASf,MAnDF,SAsDLW,EAAMT,SACRa,EAAShB,gBAnDQ,SAoDjBgB,EAASf,MAnDF,SAsDLW,EAAMR,OACRY,EAAShB,gBAnDQ,MAoDjBgB,EAASf,MAnDF,SAsDF,CACLkB,UAAW,GACXC,MAAOJ,IAoDIK,+BAAW1B,EAAX0B,CAAmBC,IAAMC,KAhDxC,SAAsBC,GAAO,IACnBC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,OAEjB,OAAKA,EASH/C,EAAAgD,EAAAC,cAAA,WACEjD,EAAAgD,EAAAC,cAACxC,EAAAuC,EAAD,CAAME,WAAS,EAACC,QAAQ,SAASC,WAAW,UAC1CpD,EAAAgD,EAAAC,cAACtC,EAAAqC,EAAD,CAAQR,UAAWM,EAAQ1B,MAAOiC,IAAI,eAAtC,KAGArD,EAAAgD,EAAAC,cAACtC,EAAAqC,EAAD,CAAQR,UAAWM,EAAQtB,OAAQ6B,IAAI,gBAAvC,KAGArD,EAAAgD,EAAAC,cAACtC,EAAAqC,EAAD,CAAQR,UAAWM,EAAQrB,KAAM4B,IAAI,cAArC,MAIFrD,EAAAgD,EAAAC,cAAA,WACAjD,EAAAgD,EAAAC,cAAA,WACAjD,EAAAgD,EAAAC,cAAC9C,EAAA,EAAD,CACEmD,OAAK,EACLd,UAAWM,EAAQ5B,gBACnB6B,OAAQA,EACRQ,MAAO7B,EACP8B,UAAW,EACXC,mBAAiB,EACjBC,YAAa7C,IAAYgB,MAAM8B,MAC/BC,cAAc,QACdC,YAAY,MACZC,YAAa,IAAIC,KACjBC,aAAc,IAAID,KAAK,KAAM,EAAG,EAAG,GACnCnD,UAAWA,EACXqD,gBAAiBjC,IAEnBhC,EAAAgD,EAAAC,cAAA,WACAjD,EAAAgD,EAAAC,cAAA,WACAjD,EAAAgD,EAAAC,cAAA,YAtCAjD,EAAAgD,EAAAC,cAAA,WACEjD,EAAAgD,EAAAC,cAAC1C,EAAAyC,EAAD,CAAkBR,UAAWM,EAAQ5B","file":"static/js/28.45bcee6a.chunk.js","sourcesContent":["/* global window */\n\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n//import { getSession, setSession, removeSession } from './../service/storageService';\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\nconst styles = theme => ({\n  bigRaceCalendar: {\n    minHeight: \"400px\"\n  },\n  short: {\n    backgroundColor: \"lightgreen\",\n    color: \"black\",\n    marginRight: \"2px\"\n  },\n  medium: {\n    backgroundColor: \"orange\",\n    color: \"black\",\n    marginRight: \"2px\"\n  },\n  long: {\n    backgroundColor: \"red\",\n    color: \"white\"\n  }\n});\n\nconst allViews = Object.keys(BigCalendar.Views).map(k => BigCalendar.Views[k]);\n\nconst propGetter = (event, start, end, isSelected) => {\n  // @TODO: Attempt at trying to make the name open the race in a new tab.\n  // const cacheKey = 'RaceCalendar.propGetter';\n\n  // if (isSelected) {\n  //   console.log(event.url, isSelected);\n  //   const cachedValue = getSession(cacheKey);\n\n  //   if (cachedValue && cachedValue === event.url) {\n  //     removeSession(cacheKey);\n  //   }\n\n  //   if (cachedValue && cachedValue !== event.url) {\n  //     removeSession(cacheKey);\n  //     window.open(event.url, '', null, false);\n  //   }\n\n  //   if (!cachedValue) {\n  //     setSession({key: cacheKey, value: event.url});\n  //     window.open(event.url, '', null, false);\n  //   }\n  //   //console.log(event);\n  // } else {\n  //   removeSession(cacheKey);\n  // }\n\n  let newStyle = {\n    backgroundColor: \"lightgrey\",\n    color: \"black\",\n    borderRadius: \"0px\",\n    border: \"none\"\n  };\n\n  if (event.short) {\n    newStyle.backgroundColor = styles().short.backgroundColor;\n    newStyle.color = styles().short.color;\n  }\n\n  if (event.medium) {\n    newStyle.backgroundColor = styles().medium.backgroundColor;\n    newStyle.color = styles().medium.color;\n  }\n\n  if (event.long) {\n    newStyle.backgroundColor = styles().long.backgroundColor;\n    newStyle.color = styles().long.color;\n  }\n\n  return {\n    className: \"\",\n    style: newStyle\n  };\n};\n\nfunction RaceCalendar(props) {\n  const { classes, events } = props;\n\n  if (!events) {\n    return (\n      <div>\n        <CircularProgress className={classes.bigRaceCalendar} />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Avatar className={classes.short} alt=\"Short Races\">\n          S\n        </Avatar>\n        <Avatar className={classes.medium} alt=\"Medium Races\">\n          M\n        </Avatar>\n        <Avatar className={classes.long} alt=\"Long Races\">\n          L\n        </Avatar>\n      </Grid>\n      <br />\n      <br />\n      <BigCalendar\n        popup\n        className={classes.bigRaceCalendar}\n        events={events}\n        views={allViews}\n        timeslots={4}\n        showMultiDayTimes\n        defaultView={BigCalendar.Views.MONTH}\n        startAccessor=\"start\"\n        endAccessor=\"end\"\n        defaultDate={new Date()}\n        scrollToTime={new Date(1970, 1, 1, 6)}\n        localizer={localizer}\n        eventPropGetter={propGetter}\n      />\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(React.memo(RaceCalendar));\n"],"sourceRoot":""}